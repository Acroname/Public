#ifndef __SystemEntity_LabView_H__
#define __SystemEntity_LabView_H__

#include "Utilities.h"

extern "C" {

	//////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////// System Entity /////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////

	// Get Module Address ////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getModule_LV(int* id, struct Result* result);

	// Get Module Base Address ///////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getModuleBaseAddress_LV(int* id, struct Result* result);

	// Get/Set Router ////////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getRouter_LV(int* id, struct Result* result);
	aLIBEXPORT void __stdcall system_setRouter_LV(int* id, struct Result* result, int router);

	// Get/Set Heartbeat Interval ////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getHBInterval_LV(int* id, struct Result* result);
	aLIBEXPORT void __stdcall system_setHBInterval_LV(int* id, struct Result* result, int HBInterval);

	// Get/Set LED ///////////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getLED_LV(int* id, struct Result* result);
	aLIBEXPORT void __stdcall system_setLED_LV(int* id, struct Result* result, int LED);

	// Get/Set Boot Slot /////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getBootSlot_LV(int* id, struct Result* result);
	aLIBEXPORT void __stdcall system_setBootSlot_LV(int* id, struct Result* result, int slot);

	// Get Version ///////////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getVersion_LV(int* id, struct Result* result);

	// Get Model /////////////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getModel_LV(int* id, struct Result* result);

	// Get Serial Number /////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getSerialNumber_LV(int* id, struct Result* result);

	// Save //////////////////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_save_LV(int* id, struct Result* result);

	// Reset /////////////////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_reset_LV(int* id, struct Result* result);

	// Get Input Voltage /////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getInputVoltage_LV(int* id, struct Result* result);

	// Get Input Current /////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getInputCurrent_LV(int* id, struct Result* result);

	// Get Module Hardware Offset ////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getModuleHardwareOffset_LV(int* id, struct Result* result);

	// Get/Set Module Software Offset ////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getModuleSoftwareOffset_LV(int* id, struct Result* result);
	aLIBEXPORT void __stdcall system_setModuleSoftwareOffset_LV(int* id, struct Result* result, int offset);

	// Get Router Address Setting ////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_getRouterAddressSetting_LV(int* id, struct Result* result);

	// Route To Me ///////////////////////////////////////////////////////////////////////////
	aLIBEXPORT void __stdcall system_RouteToMe_LV(int* id, struct Result* result, int enable);

	//////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// End System Entity ///////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////
}

#endif